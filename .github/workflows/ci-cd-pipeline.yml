name: AI Learning System CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  FLUTTER_VERSION: '3.19.0'
  NODE_VERSION: '18'

jobs:
  # Backend Testing & Build
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./ai-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: './ai-backend/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run backend tests
        run: npm test
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: ${{ secrets.GITHUB_REPO }}
          GITHUB_USER: ${{ secrets.GITHUB_USER }}
          GITHUB_EMAIL: ${{ secrets.GITHUB_EMAIL }}
          
      - name: Build backend
        run: npm run build
        
      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: ./ai-backend/dist
          retention-days: 7

  # Flutter Testing & Build
  flutter-test:
    name: Flutter Tests
    runs-on: ubuntu-latest
    needs: backend-test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          
      - name: Get dependencies
        run: flutter pub get
        
      - name: Analyze code
        run: flutter analyze
        
      - name: Run tests
        run: flutter test
        
      - name: Build APK
        run: flutter build apk --release
        
      - name: Build App Bundle
        run: flutter build appbundle --release
        
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.apk
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30
          
      - name: Upload App Bundle artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, flutter-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [backend-test, flutter-test, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./ai-backend/dist
          
      - name: Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-release.apk
          path: ./build/app/outputs/flutter-apk/
          
      - name: Deploy backend to staging
        run: |
          echo "Deploying backend to staging environment..."
          # Add your staging deployment commands here
          # Example: aws s3 sync ./ai-backend/dist s3://your-staging-bucket
          
      - name: Deploy APK to staging
        run: |
          echo "Deploying APK to staging..."
          # Add your staging APK deployment commands here
          
      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: "Staging deployment ${{ job.status }} for commit ${{ github.sha }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [backend-test, flutter-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: ./ai-backend/dist
          
      - name: Download APK artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-release.apk
          path: ./build/app/outputs/flutter-apk/
          
      - name: Download App Bundle artifacts
        uses: actions/download-artifact@v4
        with:
          name: app-release.aab
          path: ./build/app/outputs/bundle/release/
          
      - name: Deploy backend to production
        run: |
          echo "Deploying backend to production environment..."
          # Add your production deployment commands here
          # Example: aws s3 sync ./ai-backend/dist s3://your-production-bucket
          
      - name: Deploy APK to production
        run: |
          echo "Deploying APK to production..."
          # Add your production APK deployment commands here
          
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            build/app/outputs/flutter-apk/app-release.apk
            build/app/outputs/bundle/release/app-release.aab
          tag: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            ## AI Learning System Release v${{ github.run_number }}
            
            ### Changes
            - Automated deployment from CI/CD pipeline
            - Backend and frontend updates
            - Security scans completed
            
            ### Downloads
            - APK: For direct installation
            - AAB: For Google Play Store
            
          draft: false
          prerelease: false
          
      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: "Production deployment ${{ job.status }} for release v${{ github.run_number }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        working-directory: ./ai-backend
        
      - name: Run performance tests
        run: npm run test:performance
        working-directory: ./ai-backend
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          API_BASE_URL: ${{ secrets.API_BASE_URL }}
          
      - name: Generate performance report
        run: |
          echo "Performance test completed"
          # Add performance reporting logic here 