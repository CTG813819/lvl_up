[Unit]
Description=Guardian AI Self-Healing Service
After=network.target postgresql.service
Wants=postgresql.service

[Service]
Type=simple
User=ubuntu
Group=ubuntu
WorkingDirectory=/home/ubuntu/ai-backend-python
Environment=PATH=/home/ubuntu/ai-backend-python/venv/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
Environment=PYTHONPATH=/home/ubuntu/ai-backend-python
Environment=PYTHONUNBUFFERED=1
Environment=DATABASE_URL=postgresql+asyncpg://neondb_owner:npg_TV1hbOzC9ReA@ep-red-fire-aekqiiwr-pooler.c-2.us-east-2.aws.neon.tech/neondb
Environment=GITHUB_TOKEN=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
Environment=GITHUB_REPO_URL=https://github.com/CTG813819/Lvl_UP.git
Environment=GITHUB_USERNAME=CTG813819

ExecStart=/home/ubuntu/ai-backend-python/venv/bin/python -c "
import asyncio
import sys
import os
import logging
import subprocess
import shutil
from datetime import datetime

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('/home/ubuntu/ai-backend-python/logs/guardian.log'),
        logging.StreamHandler()
    ]
)

# Add app directory to path
sys.path.insert(0, '/home/ubuntu/ai-backend-python/app')

def check_sudo_availability():
    """Check if sudo is available and working"""
    try:
        # Check if sudo exists
        sudo_path = shutil.which('sudo')
        if not sudo_path:
            logging.warning('sudo not found in PATH, using alternative methods')
            return False
        
        # Test sudo access
        result = subprocess.run(['sudo', '-n', 'true'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            logging.info('sudo access confirmed')
            return True
        else:
            logging.warning(f'sudo access failed: {result.stderr}')
            return False
    except Exception as e:
        logging.warning(f'sudo check failed: {str(e)}')
        return False

try:
    from app.services.ai_agent_service import AIAgentService
    from app.core.database import get_session
    
    async def run_guardian():
        service = AIAgentService()
        logging.info('Guardian AI Service started')
        
        # Check sudo availability
        sudo_available = check_sudo_availability()
        
        while True:
            try:
                logging.info('Starting Guardian self-healing cycle')
                
                if sudo_available:
                    await service.run_guardian_agent()
                else:
                    # Run without sudo capabilities
                    logging.info('Running Guardian without sudo capabilities')
                    await service.run_guardian_agent(sudo_required=False)
                
                logging.info('Guardian self-healing cycle completed')
            except Exception as e:
                logging.error(f'Guardian self-healing error: {str(e)}')
            
            await asyncio.sleep(3600)  # 60 minutes
    
    asyncio.run(run_guardian())
except Exception as e:
    logging.error(f'Guardian service startup error: {str(e)}')
    sys.exit(1)
"

Restart=always
RestartSec=30
StartLimitInterval=300
StartLimitBurst=3

# Logging
StandardOutput=journal
StandardError=journal
SyslogIdentifier=guardian-ai

# Resource limits
LimitNOFILE=65536
LimitNPROC=4096

[Install]
WantedBy=multi-user.target
