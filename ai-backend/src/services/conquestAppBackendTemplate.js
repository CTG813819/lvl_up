const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs').promises;
const path = require('path');

/**
 * Conquest AI App Backend Template
 * This template is automatically included in every app generated by Conquest AI
 * to collect user feedback, usage data, and problems for learning
 */
class ConquestAppBackendTemplate {
  constructor(appId, appName) {
    this.appId = appId;
    this.appName = appName;
  }

  /**
   * Generate the backend code as a string
   */
  generateBackendCode() {
    return `const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const fs = require('fs').promises;
const path = require('path');

// Conquest AI App Backend - Auto-generated
// App ID: ${this.appId}
// App Name: ${this.appName}

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors({ origin: '*', credentials: true }));
app.use(bodyParser.json({ limit: '10mb' }));
app.use(bodyParser.urlencoded({ extended: true }));

// Data storage
let feedbackData = [];
let usageData = [];
let errorData = [];
let performanceData = [];

// Health check
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    appId: '${this.appId}',
    appName: '${this.appName}',
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// User feedback endpoint
app.post('/api/feedback', async (req, res) => {
  try {
    const feedback = {
      appId: '${this.appId}',
      timestamp: new Date().toISOString(),
      userId: req.body.userId || 'anonymous',
      feedbackType: req.body.type || 'general',
      rating: req.body.rating || 0,
      comment: req.body.comment || '',
      category: req.body.category || 'general',
      severity: req.body.severity || 'low',
      userAgent: req.headers['user-agent'] || '',
      appVersion: req.body.appVersion || '1.0.0',
      platform: req.body.platform || 'unknown',
      sessionId: req.body.sessionId || null,
      features: req.body.features || [],
      issues: req.body.issues || [],
      suggestions: req.body.suggestions || []
    };

    feedbackData.push(feedback);
    await sendToConquestLearning(feedback);
    await saveData('feedback.json', feedbackData);

    res.json({
      success: true,
      message: 'Feedback collected successfully',
      feedbackId: feedback.timestamp
    });
  } catch (error) {
    console.error('Error collecting feedback:', error);
    res.status(500).json({ success: false, error: 'Failed to collect feedback' });
  }
});

// Usage patterns endpoint
app.post('/api/usage', async (req, res) => {
  try {
    const usage = {
      appId: '${this.appId}',
      timestamp: new Date().toISOString(),
      sessionId: req.body.sessionId,
      userId: req.body.userId || 'anonymous',
      screenViews: req.body.screenViews || [],
      featureUsage: req.body.featureUsage || {},
      timeSpent: req.body.timeSpent || 0,
      interactions: req.body.interactions || [],
      performance: req.body.performance || {},
      errors: req.body.errors || [],
      crashes: req.body.crashes || []
    };

    usageData.push(usage);
    await sendUsageToConquest(usage);
    await saveData('usage.json', usageData);

    res.json({
      success: true,
      message: 'Usage data collected successfully',
      usageId: usage.timestamp
    });
  } catch (error) {
    console.error('Error collecting usage data:', error);
    res.status(500).json({ success: false, error: 'Failed to collect usage data' });
  }
});

// Error reporting endpoint
app.post('/api/error', async (req, res) => {
  try {
    const error = {
      appId: '${this.appId}',
      timestamp: new Date().toISOString(),
      errorType: req.body.type || 'unknown',
      errorMessage: req.body.message || '',
      stackTrace: req.body.stackTrace || '',
      severity: req.body.severity || 'medium',
      userId: req.body.userId || 'anonymous',
      sessionId: req.body.sessionId || null,
      appVersion: req.body.appVersion || '1.0.0',
      platform: req.body.platform || 'unknown',
      context: req.body.context || {},
      userAction: req.body.userAction || '',
      screen: req.body.screen || ''
    };

    errorData.push(error);
    await sendErrorToConquest(error);
    await saveData('errors.json', errorData);

    res.json({
      success: true,
      message: 'Error report collected successfully',
      errorId: error.timestamp
    });
  } catch (error) {
    console.error('Error collecting error report:', error);
    res.status(500).json({ success: false, error: 'Failed to collect error report' });
  }
});

// Performance metrics endpoint
app.post('/api/performance', async (req, res) => {
  try {
    const metrics = {
      appId: '${this.appId}',
      timestamp: new Date().toISOString(),
      loadTime: req.body.loadTime || 0,
      renderTime: req.body.renderTime || 0,
      memoryUsage: req.body.memoryUsage || 0,
      cpuUsage: req.body.cpuUsage || 0,
      networkLatency: req.body.networkLatency || 0,
      frameRate: req.body.frameRate || 0,
      batteryUsage: req.body.batteryUsage || 0,
      platform: req.body.platform || 'unknown',
      appVersion: req.body.appVersion || '1.0.0'
    };

    performanceData.push(metrics);
    await sendPerformanceToConquest(metrics);
    await saveData('performance.json', performanceData);

    res.json({
      success: true,
      message: 'Performance metrics collected successfully',
      metricsId: metrics.timestamp
    });
  } catch (error) {
    console.error('Error collecting performance metrics:', error);
    res.status(500).json({ success: false, error: 'Failed to collect performance metrics' });
  }
});

// Analytics endpoint
app.get('/api/analytics', async (req, res) => {
  try {
    const analytics = {
      appId: '${this.appId}',
      appName: '${this.appName}',
      timestamp: new Date().toISOString(),
      feedback: {
        total: feedbackData.length,
        averageRating: feedbackData.length > 0 
          ? feedbackData.reduce((sum, f) => sum + f.rating, 0) / feedbackData.length 
          : 0
      },
      usage: {
        totalSessions: usageData.length,
        averageTimeSpent: usageData.length > 0 
          ? usageData.reduce((sum, u) => sum + u.timeSpent, 0) / usageData.length 
          : 0
      },
      errors: {
        total: errorData.length
      },
      performance: {
        averageLoadTime: performanceData.length > 0 
          ? performanceData.reduce((sum, p) => sum + p.loadTime, 0) / performanceData.length 
          : 0
      }
    };

    res.json({ success: true, data: analytics });
  } catch (error) {
    console.error('Error getting analytics:', error);
    res.status(500).json({ success: false, error: 'Failed to get analytics' });
  }
});

// Helper functions
async function sendToConquestLearning(data) {
  try {
    const conquestBackendUrl = process.env.CONQUEST_BACKEND_URL || 'http://localhost:4000';
    const response = await fetch(\`\${conquestBackendUrl}/api/conquest/app-feedback\`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    if (response.ok) console.log('✅ Feedback sent to Conquest AI');
  } catch (error) {
    console.error('❌ Error sending feedback to Conquest AI:', error);
  }
}

async function sendUsageToConquest(data) {
  try {
    const conquestBackendUrl = process.env.CONQUEST_BACKEND_URL || 'http://localhost:4000';
    const response = await fetch(\`\${conquestBackendUrl}/api/conquest/app-usage\`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    if (response.ok) console.log('✅ Usage data sent to Conquest AI');
  } catch (error) {
    console.error('❌ Error sending usage data to Conquest AI:', error);
  }
}

async function sendErrorToConquest(data) {
  try {
    const conquestBackendUrl = process.env.CONQUEST_BACKEND_URL || 'http://localhost:4000';
    const response = await fetch(\`\${conquestBackendUrl}/api/conquest/app-error\`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    if (response.ok) console.log('✅ Error data sent to Conquest AI');
  } catch (error) {
    console.error('❌ Error sending error data to Conquest AI:', error);
  }
}

async function sendPerformanceToConquest(data) {
  try {
    const conquestBackendUrl = process.env.CONQUEST_BACKEND_URL || 'http://localhost:4000';
    const response = await fetch(\`\${conquestBackendUrl}/api/conquest/app-performance\`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(data)
    });
    if (response.ok) console.log('✅ Performance data sent to Conquest AI');
  } catch (error) {
    console.error('❌ Error sending performance data to Conquest AI:', error);
  }
}

async function saveData(filename, data) {
  try {
    const dataDir = path.join(__dirname, 'data');
    await fs.mkdir(dataDir, { recursive: true });
    const filePath = path.join(dataDir, filename);
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));
  } catch (error) {
    console.error('❌ Error saving data:', error);
  }
}

// Start server
app.listen(PORT, () => {
  console.log(\`🚀 ${this.appName} backend server started on port \${PORT}\`);
  console.log('📊 Feedback collection endpoints available');
  console.log('🔗 Connect your app to this backend for learning data collection');
});

module.exports = app;`;
  }
}

module.exports = ConquestAppBackendTemplate;
